#! /usr/bin/env python
#
# Copyright (C) 2018 Paulius Šarka
# License: 3-clause BSD
#
# Based on scikit-learn
# Licence: 3-clause BSD
import os
import sys
import uplift

# Optional wheelhouse-uploader features
# To automate release of binary packages for scikit-learn we need a tool
# to download the packages generated by travis and appveyor workers (with
# version number matching the current release) and upload them all at once
# to PyPI at release time.
# The URL of the artifact repositories are configured in the setup.cfg file.

cmdclass = {}
WHEELHOUSE_UPLOADER_COMMANDS = set(['fetch_artifacts', 'upload_all'])
if WHEELHOUSE_UPLOADER_COMMANDS.intersection(sys.argv):
    import wheelhouse_uploader.cmd

    cmdclass.update(vars(wheelhouse_uploader.cmd))


def configuration(parent_package='', top_path=None):
    if os.path.exists('MANIFEST'):
        os.remove('MANIFEST')

    from numpy.distutils.misc_util import Configuration
    config = Configuration(None, parent_package, top_path)

    # Avoid non-useful msg:
    # "Ignoring attempt to set 'name' (from ... "
    config.set_options(ignore_setup_xxx_py=True,
                       assume_default_configuration=True,
                       delegate_options_to_subpackages=True,
                       quiet=True)

    config.add_subpackage('uplift')

    return config


def setup_package():
    metadata = dict(name='uplift',
                    maintainer='Paulius Šarka',
                    maintainer_email='paulius.sarka@gmail.com',
                    description='tree based uplift models',
                    license='3-clause BSD',
                    url='https://github.com/psarka/uplift',
                    version=uplift.__version__,
                    classifiers=['Intended Audience :: Science/Research',
                                 'Intended Audience :: Developers',
                                 'License :: OSI Approved',
                                 'Programming Language :: C',
                                 'Programming Language :: Python',
                                 'Topic :: Software Development',
                                 'Topic :: Scientific/Engineering',
                                 'Operating System :: Microsoft :: Windows',
                                 'Operating System :: POSIX',
                                 'Operating System :: Unix',
                                 'Operating System :: MacOS',
                                 'Programming Language :: Python :: 2',
                                 'Programming Language :: Python :: 2.7',
                                 'Programming Language :: Python :: 3',
                                 'Programming Language :: Python :: 3.4',
                                 'Programming Language :: Python :: 3.5',
                                 'Programming Language :: Python :: 3.6',
                                 'Programming Language :: Python :: 3.7'],
                    cmdclass=cmdclass,
                    zip_safe=False,
                    include_package_data=True,
                    install_requires=['numpy>=1.7',
                                      'scipy>=0.9',
                                      'cython',
                                      'joblib'])

    # These actions are required to succeed without numpy
    if len(sys.argv) == 1 or (
            len(sys.argv) >= 2 and ('--help' in sys.argv[1:] or
                                    sys.argv[1] in ('--help-commands',
                                                    'egg_info',
                                                    '--version',
                                                    'clean'))):
        try:
            from setuptools import setup
        except ImportError:
            from distutils.core import setup

    else:

        from numpy.distutils.core import setup
        from Cython.Build import cythonize
        metadata['configuration'] = configuration
        metadata['ext_modules'] = cythonize(['uplift/tree/_criterion.pyx',
                                             'uplift/tree/_splitter.pyx',
                                             'uplift/tree/_tree.pyx',
                                             'uplift/tree/_utils.pyx'])

    setup(**metadata)


if __name__ == "__main__":
    setup_package()
